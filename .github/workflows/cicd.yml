name: CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # GitHub 레포 소스코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v4

      # JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # Spring Boot 빌드 (테스트 코드 제외)
      - name: Build Spring Boot app
        run: ./gradlew clean build -x test

      # DockerHub 로그인
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker 이미지 빌드
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-miruni-backend:latest .

      # DockerHub에 이미지 푸시
      - name: Push Docker image to DockerHub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-miruni-backend:latest

      # EC2에 SSH 접속하여 컨테이너 재배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |

            # 1. 기존 컨테이너 종료 및 삭제
            docker stop spring-miruni-backend || true
            docker rm spring-miruni-backend || true

            # 포트 점유 강제 해제 (중복 실행 방지)
            sudo fuser -k 8080/tcp || true

            # 최신 이미지 다운로드
            docker pull ${{ secrets.DOCKER_USERNAME }}/spring-miruni-backend:latest

            # GitHub Secret에 저장된 application.yml 내용을 EC2에 파일로 생성
            echo "${{ secrets.APPLICATION_YML }}" > ~/application.yml

            # 새 컨테이너 실행
              # 이름: spring-miruni-backend
              # EC2의 8080 포트를 컨테이너에 연결
              # application.yml을 컨테이너 안으로 마운트
            docker run -d \
              --name spring-miruni-backend \
              -p 8080:8080 \
              -v ~/application.yml:/app/application.yml \
              ${{ secrets.DOCKER_USERNAME }}/spring-miruni-backend:latest




